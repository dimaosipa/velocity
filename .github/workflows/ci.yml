name: CI

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

# Cancel previous runs on new commits to the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: macos-14 # Apple Silicon only
    name: Build Binaries
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Swift
      uses: swift-actions/setup-swift@v1
      with:
        swift-version: "5.9"
    
    - name: Swift Version
      run: swift --version
      
    - name: System Info
      run: |
        echo "=== System Information ==="
        uname -a
        sysctl hw.model
        sysctl machdep.cpu.brand_string || echo "CPU info not available"
        echo "=== Disk Space ==="
        df -h
        echo "=== Memory ==="
        vm_stat
    
    - name: Cache Swift Package Manager
      uses: actions/cache@v3
      with:
        path: .build
        key: ${{ runner.os }}-arm64-spm-${{ hashFiles('Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-arm64-spm-
    
    - name: Resolve Dependencies
      run: swift package resolve
      
    - name: Build Debug and Release
      run: |
        echo "=== Building Debug ==="
        ./Scripts/build.sh
        echo "=== Building Release ==="
        ./Scripts/build.sh --release
      
    - name: Get Version
      id: version
      run: |
        VERSION=$(.build/release/velo --version)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Built version: $VERSION"
      
    - name: Prepare Artifacts
      run: |
        # Create a clean artifacts directory with proper structure
        mkdir -p artifacts/debug artifacts/release
        cp .build/debug/velo artifacts/debug/velo
        cp .build/release/velo artifacts/release/velo
        chmod +x artifacts/debug/velo artifacts/release/velo
    
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: velo-binaries
        path: artifacts/
        retention-days: 1

  test:
    runs-on: macos-14
    name: Unit Tests
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Swift
      uses: swift-actions/setup-swift@v1
      with:
        swift-version: "5.9"
    
    - name: Cache Swift Package Manager
      uses: actions/cache@v3
      with:
        path: .build
        key: ${{ runner.os }}-arm64-spm-${{ hashFiles('Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-arm64-spm-
    
    - name: Resolve Dependencies
      run: swift package resolve
    
    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: velo-binaries
        path: artifacts/
      
    - name: Setup Downloaded Binaries
      run: |
        # Debug: Show what's in the artifacts directory
        echo "=== Contents of artifacts directory ==="
        find artifacts -type f -name "velo" 2>/dev/null || echo "No velo binaries found"
        ls -la artifacts/ || echo "artifacts directory does not exist"
        ls -la artifacts/debug/ 2>/dev/null || echo "artifacts/debug directory does not exist"
        ls -la artifacts/release/ 2>/dev/null || echo "artifacts/release directory does not exist"
        
        # Create .build directory structure and copy binaries
        mkdir -p .build/debug .build/release
        cp artifacts/debug/velo .build/debug/velo
        cp artifacts/release/velo .build/release/velo
        
        # Restore executable permissions
        chmod +x .build/debug/velo .build/release/velo
        
        # Verify binaries work
        .build/debug/velo --version
        .build/release/velo --version
        echo "=== Testing debug binary ==="
        .build/debug/velo --version 2>/dev/null || echo "Debug binary failed"
        echo "=== Testing release binary ==="
        .build/release/velo --version 2>/dev/null || echo "Release binary failed"

    - name: Generate Version for Tests
      run: |
        echo "=== Generating version information for tests ==="
        ./Scripts/generate-version.sh

    - name: Run Unit Tests
      run: |
        echo "=== Running Unit Tests ==="
        swift test --parallel || exit 1
        echo "âœ… Unit tests passed"

  release:
    runs-on: ubuntu-latest
    name: Create Release
    needs: [build, test]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: velo-binaries
        path: artifacts/
    
    - name: Setup Downloaded Binaries
      run: |
        # Create .build directory structure and copy binaries
        mkdir -p .build/debug .build/release
        cp artifacts/debug/velo .build/debug/velo
        cp artifacts/release/velo .build/release/velo
        chmod +x .build/debug/velo .build/release/velo
    
    - name: Get version and tag info
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        
        # Get previous tag for changelog
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -z "$PREVIOUS_TAG" ]; then
          # If no previous tag, use the initial commit
          PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
        fi
        echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
        
        echo "Creating release for version: $VERSION"
        echo "Previous version: $PREVIOUS_TAG"
    
    - name: Create release directory and tarball
      run: |
        mkdir -p release
        cp .build/release/velo release/velo
        chmod +x release/velo
        
        cd release
        tar -czf velo-${{ steps.get_version.outputs.VERSION }}-arm64.tar.gz velo
        
        # Generate SHA256 checksum
        shasum -a 256 velo-${{ steps.get_version.outputs.VERSION }}-arm64.tar.gz > velo-${{ steps.get_version.outputs.VERSION }}-arm64.tar.gz.sha256
    
    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        name: Release ${{ steps.get_version.outputs.VERSION }}
        body: |
          Release ${{ steps.get_version.outputs.VERSION }}
          
          ## What's Changed
          
          **Full Changelog**: https://github.com/dimaosipa/velocity/compare/${{ steps.get_version.outputs.PREVIOUS_TAG }}...${{ steps.get_version.outputs.VERSION }}
          
          ## Installation via Homebrew
          ```bash
          brew tap dimaosipa/brew
          brew install velo
          ```
          
          ## Manual Installation
          Download the binary and extract:
          ```bash
          wget https://github.com/dimaosipa/velocity/releases/download/${{ steps.get_version.outputs.VERSION }}/velo-${{ steps.get_version.outputs.VERSION }}-arm64.tar.gz
          tar -xzf velo-${{ steps.get_version.outputs.VERSION }}-arm64.tar.gz
          ./velo install-self
          ```
          
          ## Requirements
          - macOS 12.0 or later
          - Apple Silicon Mac
          
        files: |
          release/velo-${{ steps.get_version.outputs.VERSION }}-arm64.tar.gz
          release/velo-${{ steps.get_version.outputs.VERSION }}-arm64.tar.gz.sha256
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Verify Release Creation
      run: |
        if [ -z "${{ steps.create_release.outputs.url }}" ]; then
          echo "Failed to create release"
          exit 1
        fi
        echo "Release created successfully: ${{ steps.create_release.outputs.url }}"
    
    - name: Update Homebrew Tap
      uses: ./.github/actions/update-homebrew-tap
      with:
        formula-name: velo
        homebrew-tap: dimaosipa/homebrew-brew
        formula-path: Formula/velo.rb
        download-url: https://github.com/dimaosipa/velocity/releases/download/${{ steps.get_version.outputs.VERSION }}/velo-${{ steps.get_version.outputs.VERSION }}-arm64.tar.gz
        version: ${{ steps.get_version.outputs.VERSION }}
        sha256-file: release/velo-${{ steps.get_version.outputs.VERSION }}-arm64.tar.gz.sha256
        commit-message: |
          velo ${{ steps.get_version.outputs.VERSION }}
          
          Automated update from dimaosipa/velocity release
        token: ${{ secrets.HOMEBREW_TAP_TOKEN }}

  # Cleanup job to remove tag if tests or build fail
  cleanup:
    if: failure() && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: [build, test, release]
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed to delete tags
    
    - name: Delete failed tag
      run: |
        # Extract tag name from ref
        TAG_NAME=${GITHUB_REF#refs/tags/}
        echo "::warning::Build/test failure detected for tag $TAG_NAME"
        echo "Cleaning up failed tag to keep repository tidy..."
        
        # Delete the tag locally and remotely
        git tag -d "$TAG_NAME" 2>/dev/null || echo "Tag $TAG_NAME not found locally"
        git push origin :refs/tags/"$TAG_NAME" 2>/dev/null || echo "Tag $TAG_NAME not found on remote"
        
        echo "::notice::Tag $TAG_NAME has been removed due to build/test failures"
        echo "Please fix the issues and create a new tag for release"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}